Rule fired: Class op quot

==================== Simplifier iteration=1 ====================
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks: 3
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 15, types: 11, coercions: 10}

Main.quotInt :: GHC.Integer.Type.Integer
[LclId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 230 0}]
Main.quotInt =
  GHC.Real.$fIntegralInteger_$cquot
    (__integer 100063) (__integer 156)

Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 30 60}]
Main.main =
  (\ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
     ((System.IO.print
         @ GHC.Integer.Type.Integer GHC.Show.$fShowInteger Main.quotInt)
      `cast` (GHC.Types.NTCo:IO[0] <()>
              :: GHC.Types.IO ()
                   ~#
                 (GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
       eta_B1)
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

:Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 60}]
:Main.main =
  (\ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
     ((GHC.TopHandler.runMainIO @ () Main.main)
      `cast` (GHC.Types.NTCo:IO[0] <()>
              :: GHC.Types.IO ()
                   ~#
                 (GHC.Prim.State# GHC.Prim.RealWorld
                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
       eta_B1)
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())




==================== Simplifier iteration=2 ====================
  ---- Simplifier counts for Simplifier iteration=2
  Total ticks: 2
  ---- End of simplifier counts for Simplifier iteration=2
Result size of Simplifier iteration=2
  = {terms: 19, types: 23, coercions: 10}

Main.quotInt :: GHC.Integer.Type.Integer
[LclId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=False,
         ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 230 0}]
Main.quotInt =
  GHC.Real.$fIntegralInteger_$cquot
    (__integer 100063) (__integer 156)

a_sr2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 30 60}]
a_sr2 =
  \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    ((System.IO.print
        @ GHC.Integer.Type.Integer GHC.Show.$fShowInteger Main.quotInt)
     `cast` (GHC.Types.NTCo:IO[0] <()>
             :: GHC.Types.IO ()
                  ~#
                (GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
      eta_B1

Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main =
  a_sr2
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

a_sr4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
a_sr4 =
  \ (eta_X9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    ((GHC.TopHandler.runMainIO @ () Main.main)
     `cast` (GHC.Types.NTCo:IO[0] <()>
             :: GHC.Types.IO ()
                  ~#
                (GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
      eta_X9

:Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:Main.main =
  a_sr4
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())




==================== Simplifier iteration=3 ====================
  ---- Simplifier counts for Simplifier iteration=3
  Total ticks: 1
  ---- End of simplifier counts for Simplifier iteration=3
Result size of Simplifier iteration=3
  = {terms: 17, types: 22, coercions: 10}

a_sr2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 260 60}]
a_sr2 =
  \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    ((System.IO.print
        @ GHC.Integer.Type.Integer
        GHC.Show.$fShowInteger
        (GHC.Real.$fIntegralInteger_$cquot
           (__integer 100063) (__integer 156)))
     `cast` (GHC.Types.NTCo:IO[0] <()>
             :: GHC.Types.IO ()
                  ~#
                (GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
      eta_B1

Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main =
  a_sr2
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

a_sr4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
a_sr4 =
  \ (eta_X9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    ((GHC.TopHandler.runMainIO @ () Main.main)
     `cast` (GHC.Types.NTCo:IO[0] <()>
             :: GHC.Types.IO ()
                  ~#
                (GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
      eta_X9

:Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:Main.main =
  a_sr4
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())



Rule fired: eqInteger
Rule fired: quotInteger
Rule fired: Class op show

==================== Simplifier iteration=1 ====================
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks: 25
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 21, types: 23, coercions: 9}

a_sr2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 290 0}]
a_sr2 =
  \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.IO.Handle.Text.hPutStr2
      GHC.IO.Handle.FD.stdout
      (let {
         ds1_aqJ :: GHC.Integer.Type.Integer
         [LclId,
          Str=DmdType,
          Unf=Unf{Src=<vanilla>, TopLvl=False, Arity=0, Value=True,
                  ConLike=True, WorkFree=True, Expandable=True,
                  Guidance=IF_ARGS [] 100 0}]
         ds1_aqJ = __integer 156 } in
       GHC.Show.$fShowInteger_$cshowsPrec
         GHC.Show.shows25 (__integer 641) (GHC.Types.[] @ GHC.Types.Char))
      GHC.Types.True
      eta_B1

Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main =
  a_sr2
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

a_sr4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
a_sr4 =
  \ (eta_X9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.TopHandler.runMainIO1
      @ ()
      (a_sr2
       `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                    ~#
                  GHC.Types.IO ()))
      eta_X9

:Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:Main.main =
  a_sr4
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())




==================== Simplifier iteration=1 ====================
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks: 9
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 24, types: 30, coercions: 9}

a_sr2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0] 200 0}]
a_sr2 =
  \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.IO.Handle.Text.hPutStr2
      GHC.IO.Handle.FD.stdout
      (case GHC.Show.$w$cshowsPrec
              0 (__integer 641) (GHC.Types.[] @ GHC.Types.Char)
       of _ { (# ww_a1FN, ww_a1FO #) ->
       GHC.Types.: @ GHC.Types.Char ww_a1FN ww_a1FO
       })
      GHC.Types.True
      eta_B1

Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
Main.main =
  a_sr2
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())

a_sr4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[LclId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
a_sr4 =
  \ (eta_X9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
    GHC.TopHandler.runMainIO1
      @ ()
      (a_sr2
       `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                    ~#
                  GHC.Types.IO ()))
      eta_X9

:Main.main :: GHC.Types.IO ()
[LclIdX,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:Main.main =
  a_sr4
  `cast` (Sym (GHC.Types.NTCo:IO[0] <()>)
          :: (GHC.Prim.State# GHC.Prim.RealWorld
              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~#
             GHC.Types.IO ())



