[1 of 3] Compiling T2902_Sum        ( T2902_Sum.hs, T2902_Sum.o )

==================== Loopify tail calls ====================
{offset
  cfY:
      _sf2::P32 = P32[(old + 8)];
      goto cfT;
  cfT:
      if (Sp - <highSp> < SpLim) goto cfZ; else goto cg0;
  cfZ:
      R1 = T2902_Sum.insert_closure;
      P32[(old + 8)] = _sf2::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cg0:
      I32[(young<cfV> + 4)] = cfV;
      R1 = _sf2::P32;
      if (R1 & 3 != 0) goto cfV; else goto cfW;
  cfW:
      call (I32[R1])(R1) returns to cfV, args: 4, res: 4, upd: 4;
  cfV:
      _sf3::P32 = R1;
      _sf4::P32 = P32[_sf3::P32 + 3];
      _sf5::P32 = P32[_sf3::P32 + 7];
      _sf6::P32 = P32[_sf3::P32 + 11];
      _sf7::P32 = P32[_sf3::P32 + 15];
      _sf8::P32 = P32[_sf3::P32 + 19];
      _sf9::P32 = P32[_sf3::P32 + 23];
      R1 = _sf4::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cgi:
      _sfa::P32 = P32[(old + 8)];
      goto cgd;
  cgd:
      if (Sp - <highSp> < SpLim) goto cgj; else goto cgk;
  cgj:
      R1 = T2902_Sum.union_closure;
      P32[(old + 8)] = _sfa::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cgk:
      I32[(young<cgf> + 4)] = cgf;
      R1 = _sfa::P32;
      if (R1 & 3 != 0) goto cgf; else goto cgg;
  cgg:
      call (I32[R1])(R1) returns to cgf, args: 4, res: 4, upd: 4;
  cgf:
      _sfb::P32 = R1;
      _sfc::P32 = P32[_sfb::P32 + 3];
      _sfd::P32 = P32[_sfb::P32 + 7];
      _sfe::P32 = P32[_sfb::P32 + 11];
      _sff::P32 = P32[_sfb::P32 + 15];
      _sfg::P32 = P32[_sfb::P32 + 19];
      _sfh::P32 = P32[_sfb::P32 + 23];
      R1 = _sfd::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cgC:
      _sfi::P32 = P32[(old + 8)];
      goto cgx;
  cgx:
      if (Sp - <highSp> < SpLim) goto cgD; else goto cgE;
  cgD:
      R1 = T2902_Sum.unions_closure;
      P32[(old + 8)] = _sfi::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cgE:
      I32[(young<cgz> + 4)] = cgz;
      R1 = _sfi::P32;
      if (R1 & 3 != 0) goto cgz; else goto cgA;
  cgA:
      call (I32[R1])(R1) returns to cgz, args: 4, res: 4, upd: 4;
  cgz:
      _sfj::P32 = R1;
      _sfk::P32 = P32[_sfj::P32 + 3];
      _sfl::P32 = P32[_sfj::P32 + 7];
      _sfm::P32 = P32[_sfj::P32 + 11];
      _sfn::P32 = P32[_sfj::P32 + 15];
      _sfo::P32 = P32[_sfj::P32 + 19];
      _sfp::P32 = P32[_sfj::P32 + 23];
      R1 = _sfm::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cgW:
      _sfq::P32 = P32[(old + 8)];
      goto cgR;
  cgR:
      if (Sp - <highSp> < SpLim) goto cgX; else goto cgY;
  cgX:
      R1 = T2902_Sum.extractMin_closure;
      P32[(old + 8)] = _sfq::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cgY:
      I32[(young<cgT> + 4)] = cgT;
      R1 = _sfq::P32;
      if (R1 & 3 != 0) goto cgT; else goto cgU;
  cgU:
      call (I32[R1])(R1) returns to cgT, args: 4, res: 4, upd: 4;
  cgT:
      _sfr::P32 = R1;
      _sfs::P32 = P32[_sfr::P32 + 3];
      _sft::P32 = P32[_sfr::P32 + 7];
      _sfu::P32 = P32[_sfr::P32 + 11];
      _sfv::P32 = P32[_sfr::P32 + 15];
      _sfw::P32 = P32[_sfr::P32 + 19];
      _sfx::P32 = P32[_sfr::P32 + 23];
      R1 = _sfv::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  chg:
      _sfy::P32 = P32[(old + 8)];
      goto chb;
  chb:
      if (Sp - <highSp> < SpLim) goto chh; else goto chi;
  chh:
      R1 = T2902_Sum.fromList_closure;
      P32[(old + 8)] = _sfy::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  chi:
      I32[(young<chd> + 4)] = chd;
      R1 = _sfy::P32;
      if (R1 & 3 != 0) goto chd; else goto che;
  che:
      call (I32[R1])(R1) returns to chd, args: 4, res: 4, upd: 4;
  chd:
      _sfz::P32 = R1;
      _sfA::P32 = P32[_sfz::P32 + 3];
      _sfB::P32 = P32[_sfz::P32 + 7];
      _sfC::P32 = P32[_sfz::P32 + 11];
      _sfD::P32 = P32[_sfz::P32 + 15];
      _sfE::P32 = P32[_sfz::P32 + 19];
      _sfF::P32 = P32[_sfz::P32 + 23];
      R1 = _sfE::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  chA:
      _sfG::P32 = P32[(old + 8)];
      goto chv;
  chv:
      if (Sp - <highSp> < SpLim) goto chB; else goto chC;
  chB:
      R1 = T2902_Sum.toList_closure;
      P32[(old + 8)] = _sfG::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  chC:
      I32[(young<chx> + 4)] = chx;
      R1 = _sfG::P32;
      if (R1 & 3 != 0) goto chx; else goto chy;
  chy:
      call (I32[R1])(R1) returns to chx, args: 4, res: 4, upd: 4;
  chx:
      _sfH::P32 = R1;
      _sfI::P32 = P32[_sfH::P32 + 3];
      _sfJ::P32 = P32[_sfH::P32 + 7];
      _sfK::P32 = P32[_sfH::P32 + 11];
      _sfL::P32 = P32[_sfH::P32 + 15];
      _sfM::P32 = P32[_sfH::P32 + 19];
      _sfN::P32 = P32[_sfH::P32 + 23];
      R1 = _sfN::P32;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  chP:
      _B6::P32 = P32[(old + 28)];
      _B5::P32 = P32[(old + 24)];
      _B4::P32 = P32[(old + 20)];
      _B3::P32 = P32[(old + 16)];
      _B2::P32 = P32[(old + 12)];
      _B1::P32 = P32[(old + 8)];
      goto chM;
  chM:
      if (Sp - <highSp> < SpLim) goto chQ; else goto chR;
  chR:
      Hp = Hp + 28;
      if (Hp > HpLim) goto chT; else goto chS;
  chT:
      HpAlloc = 28;
      goto chQ;
  chQ:
      R1 = T2902_Sum.D:Sum_closure;
      P32[(old + 28)] = _B6::P32;
      P32[(old + 24)] = _B5::P32;
      P32[(old + 20)] = _B4::P32;
      P32[(old + 16)] = _B3::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 28, res: 0, upd: 4;
  chS:
      I32[Hp - 24] = T2902_Sum.D:Sum_con_info;
      P32[Hp - 20] = _B6::P32;
      P32[Hp - 16] = _B5::P32;
      P32[Hp - 12] = _B4::P32;
      P32[Hp - 8] = _B3::P32;
      P32[Hp - 4] = _B2::P32;
      P32[Hp] = _B1::P32;
      _chO::P32 = Hp - 23;
      R1 = _chO::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  ci4:
      R1 = R1 + 1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  ci5:
      R1 = R1 + 1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}


[2 of 3] Compiling T2902_B_PairingSum ( T2902_B_PairingSum.hs, T2902_B_PairingSum.o )

==================== Loopify tail calls ====================
{offset
  cJP:
      _sHs::P32 = P32[(old + 20)];
      _sHt::P32 = P32[(old + 16)];
      _sHu::P32 = P32[(old + 12)];
      _sHv::P32 = P32[(old + 8)];
      goto cJD;
  cJD:
      if (Sp - <highSp> < SpLim) goto cJQ; else goto cJR;
  cJQ:
      R1 = T2902_B_PairingSum.$fSumPSumab_$cunions_closure;
      P32[(old + 20)] = _sHs::P32;
      P32[(old + 16)] = _sHt::P32;
      P32[(old + 12)] = _sHu::P32;
      P32[(old + 8)] = _sHv::P32;
      call (stg_gc_fun)(R1) args: 20, res: 0, upd: 4;
  cJR:
      I32[(young<cJF> + 4)] = cJF;
      R1 = _sHv::P32;
      if (R1 & 3 != 0) goto cJF; else goto cJG;
  cJG:
      call (I32[R1])(R1) returns to cJF, args: 4, res: 4, upd: 4;
  cJF:
      _sHw::P32 = R1;
      _cJL::P32 = _sHw::P32 & 3;
      if (_cJL::P32 >= 2) goto cJK; else goto cJJ;
  cJK:
      _sHx::P32 = P32[_sHw::P32 + 2];
      _sHy::P32 = P32[_sHw::P32 + 6];
      I32[(young<cJX> + 4)] = cJX;
      R1 = _sHy::P32;
      if (R1 & 3 != 0) goto cJX; else goto cJZ;
  cJZ:
      call (I32[R1])(R1) returns to cJX, args: 4, res: 4, upd: 4;
  cJX:
      _sHz::P32 = R1;
      _cKk::P32 = _sHz::P32 & 3;
      if (_cKk::P32 >= 2) goto cKe; else goto cK5;
  cKe:
      _sHA::P32 = P32[_sHz::P32 + 2];
      _sHB::P32 = P32[_sHz::P32 + 6];
      I32[(young<cK8> + 4)] = cK8;
      P32[(young<cK8> + 20)] = _sHs::P32;
      P32[(young<cK8> + 16)] = _sHt::P32;
      P32[(young<cK8> + 12)] = _sHu::P32;
      P32[(young<cK8> + 8)] = _sHB::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() returns to cK8, args: 20, res: 4, upd: 4;
  cK8:
      _sHD::P32 = R1;
      I32[(young<cKc> + 4)] = cKc;
      P32[(young<cKc> + 24)] = _sHs::P32;
      P32[(young<cKc> + 20)] = _sHt::P32;
      P32[(young<cKc> + 16)] = _sHu::P32;
      P32[(young<cKc> + 12)] = _sHx::P32;
      P32[(young<cKc> + 8)] = _sHA::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunion_info() returns to cKc, args: 24, res: 4, upd: 4;
  cKc:
      _sHC::P32 = R1;
      P32[(old + 24)] = _sHs::P32;
      P32[(old + 20)] = _sHt::P32;
      P32[(old + 16)] = _sHu::P32;
      P32[(old + 12)] = _sHC::P32;
      P32[(old + 8)] = _sHD::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunion_info() args: 24, res: 0, upd: 4;
  cK5:
      R1 = _sHx::P32 & (-4);
      call (I32[R1])(R1) args: 4, res: 0, upd: 4;
  cJJ:
      R1 = T2902_B_PairingSum.Empty_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cKM:
      _sHT::P32 = R1;
      goto cKK;
  cKK:
      if (Sp - <highSp> < SpLim) goto cKN; else goto cKO;
  cKN:
      R1 = _sHT::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  cKO:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _sHT::P32;
      _sHG::P32 = P32[_sHT::P32 + 8];
      _sHL::P32 = P32[_sHT::P32 + 12];
      _sHP::P32 = P32[_sHT::P32 + 16];
      P32[(old + 28)] = _sHG::P32;
      I32[(old + 24)] = stg_ap_pp_info;
      P32[(old + 20)] = _sHP::P32;
      P32[(old + 16)] = _sHL::P32;
      call GHC.Num.+_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  cL5:
      _sHX::P32 = R1;
      goto cL3;
  cL3:
      if (Sp - <highSp> < SpLim) goto cL6; else goto cL7;
  cL6:
      R1 = _sHX::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  cL7:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _sHX::P32;
      _sHG::P32 = P32[_sHX::P32 + 8];
      P32[(old + 24)] = _sHG::P32;
      I32[(old + 20)] = stg_ap_p_info;
      P32[(old + 16)] = lvl_rHo_closure+1;
      call GHC.Num.fromInteger_info() args: 24, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  cLf:
      _sHE::P32 = P32[(old + 24)];
      _sHF::P32 = P32[(old + 20)];
      _sHG::P32 = P32[(old + 16)];
      _sHH::P32 = P32[(old + 12)];
      _sHI::P32 = P32[(old + 8)];
      goto cKp;
  cKp:
      if (Sp - <highSp> < SpLim) goto cLg; else goto cLh;
  cLg:
      R1 = T2902_B_PairingSum.$fSumPSumab_$cunion_closure;
      P32[(old + 24)] = _sHE::P32;
      P32[(old + 20)] = _sHF::P32;
      P32[(old + 16)] = _sHG::P32;
      P32[(old + 12)] = _sHH::P32;
      P32[(old + 8)] = _sHI::P32;
      call (stg_gc_fun)(R1) args: 24, res: 0, upd: 4;
  cLh:
      I32[(young<cKr> + 4)] = cKr;
      R1 = _sHI::P32;
      if (R1 & 3 != 0) goto cKr; else goto cKs;
  cKs:
      call (I32[R1])(R1) returns to cKr, args: 4, res: 4, upd: 4;
  cKr:
      _sHJ::P32 = R1;
      _cLb::P32 = _sHJ::P32 & 3;
      if (_cLb::P32 >= 2) goto cLa; else goto cL9;
  cLa:
      _sHK::P32 = P32[_sHJ::P32 + 2];
      _sHL::P32 = P32[_sHJ::P32 + 6];
      _sHM::P32 = P32[_sHJ::P32 + 10];
      I32[(young<cKx> + 4)] = cKx;
      R1 = _sHH::P32;
      if (R1 & 3 != 0) goto cKx; else goto cKy;
  cKy:
      call (I32[R1])(R1) returns to cKx, args: 4, res: 4, upd: 4;
  cKx:
      _sHN::P32 = R1;
      _cMc::P32 = _sHN::P32 & 3;
      if (_cMc::P32 >= 2) goto cLq; else goto cLo;
  cLq:
      _sHO::P32 = P32[_sHN::P32 + 2];
      _sHP::P32 = P32[_sHN::P32 + 6];
      _sHQ::P32 = P32[_sHN::P32 + 10];
      I32[(young<cKD> + 4)] = cKD;
      P32[(young<cKD> + 20)] = _sHE::P32;
      I32[(young<cKD> + 16)] = stg_ap_pp_info;
      P32[(young<cKD> + 12)] = _sHO::P32;
      P32[(young<cKD> + 8)] = _sHK::P32;
      call GHC.Classes.compare_info() returns to cKD, args: 20, res: 4, upd: 4;
  cKD:
      _sHR::P32 = R1;
      _cM5::P32 = _sHR::P32 & 3;
      if (_cM5::P32 >= 2) goto cMa; else goto cLv;
  cMa:
      if (_cM5::P32 >= 3) goto cM1; else goto cLz;
  cM1:
      Hp = Hp + 28;
      if (Hp > HpLim) goto cM4; else goto cM3;
  cM3:
      I32[Hp - 24] = :_con_info;
      P32[Hp - 20] = _sHN::P32;
      P32[Hp - 16] = _sHM::P32;
      _cLZ::P32 = Hp - 22;
      I32[Hp - 12] = T2902_B_PairingSum.Tree_con_info;
      P32[Hp - 8] = _sHK::P32;
      P32[Hp - 4] = _sHL::P32;
      P32[Hp] = _cLZ::P32;
      _cM0::P32 = Hp - 10;
      R1 = _cM0::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  cLz:
      Hp = Hp + 20;
      if (Hp > HpLim) goto cLC; else goto cLB;
  cLC:
      HpAlloc = 20;
      goto cM2;
  cLB:
      I32[Hp - 16] = ds1_sHT_info;
      P32[Hp - 8] = _sHG::P32;
      P32[Hp - 4] = _sHL::P32;
      P32[Hp] = _sHP::P32;
      _cKI::P32 = Hp - 16;
      I32[(young<cKP> + 4)] = cKP;
      P32[(young<cKP> + 20)] = _sHE::P32;
      P32[(young<cKP> + 16)] = _sHF::P32;
      P32[(young<cKP> + 12)] = _sHG::P32;
      P32[(young<cKP> + 8)] = _sHM::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() returns to cKP, args: 20, res: 4, upd: 4;
  cKP:
      _sHW::P32 = R1;
      I32[(young<cKT> + 4)] = cKT;
      P32[(young<cKT> + 20)] = _sHE::P32;
      P32[(young<cKT> + 16)] = _sHF::P32;
      P32[(young<cKT> + 12)] = _sHG::P32;
      P32[(young<cKT> + 8)] = _sHQ::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() returns to cKT, args: 20, res: 4, upd: 4;
  cKT:
      _sHV::P32 = R1;
      I32[(young<cKX> + 4)] = cKX;
      P32[(young<cKX> + 24)] = _sHE::P32;
      P32[(young<cKX> + 20)] = _sHF::P32;
      P32[(young<cKX> + 16)] = _sHG::P32;
      P32[(young<cKX> + 12)] = _sHV::P32;
      P32[(young<cKX> + 8)] = _sHW::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunion_info() returns to cKX, args: 24, res: 4, upd: 4;
  cKX:
      _sHU::P32 = R1;
      Hp = Hp + 12;
      if (Hp > HpLim) goto cLI; else goto cLH;
  cLI:
      HpAlloc = 12;
      goto cLG;
  cLG:
      R1 = _sHU::P32;
      call stg_gc_unpt_r1(R1) returns to cKX, args: 4, res: 4, upd: 4;
  cLH:
      I32[Hp - 8] = sat_sHX_info;
      P32[Hp] = _sHG::P32;
      _cL1::P32 = Hp - 8;
      I32[(young<cLF> + 4)] = cLF;
      P32[(young<cLF> + 20)] = _sHF::P32;
      I32[(young<cLF> + 16)] = stg_ap_pp_info;
      P32[(young<cLF> + 12)] = _cKI::P32;
      P32[(young<cLF> + 8)] = _cL1::P32;
      call GHC.Classes.==_info() returns to cLF, args: 20, res: 4, upd: 4;
  cLF:
      _sHY::P32 = R1;
      _cLT::P32 = _sHY::P32 & 3;
      if (_cLT::P32 >= 2) goto cLS; else goto cLO;
  cLS:
      R1 = _sHU::P32 & (-4);
      call (I32[R1])(R1) args: 4, res: 0, upd: 4;
  cLO:
      P32[(old + 28)] = _sHE::P32;
      P32[(old + 24)] = _sHF::P32;
      P32[(old + 20)] = _sHG::P32;
      P32[(old + 16)] = _sHO::P32;
      P32[(old + 12)] = _cKI::P32;
      P32[(old + 8)] = _sHU::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cinsert_info() args: 28, res: 0, upd: 4;
  cLv:
      Hp = Hp + 28;
      if (Hp > HpLim) goto cM4; else goto cLx;
  cM4:
      HpAlloc = 28;
      goto cM2;
  cM2:
      R1 = _sHR::P32;
      call stg_gc_unpt_r1(R1) returns to cKD, args: 4, res: 4, upd: 4;
  cLx:
      I32[Hp - 24] = :_con_info;
      P32[Hp - 20] = _sHJ::P32;
      P32[Hp - 16] = _sHQ::P32;
      _cLs::P32 = Hp - 22;
      I32[Hp - 12] = T2902_B_PairingSum.Tree_con_info;
      P32[Hp - 8] = _sHO::P32;
      P32[Hp - 4] = _sHP::P32;
      P32[Hp] = _cLs::P32;
      _cLt::P32 = Hp - 10;
      R1 = _cLt::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  cLo:
      R1 = _sHJ::P32 & (-4);
      call (I32[R1])(R1) args: 4, res: 0, upd: 4;
  cL9:
      R1 = _sHH::P32 & (-4);
      call (I32[R1])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cMk:
      _sI0::P32 = P32[(old + 28)];
      _sI1::P32 = P32[(old + 24)];
      _sI2::P32 = P32[(old + 20)];
      _sI3::P32 = P32[(old + 16)];
      _sI4::P32 = P32[(old + 12)];
      _sI5::P32 = P32[(old + 8)];
      goto cMh;
  cMh:
      if (Sp - <highSp> < SpLim) goto cMl; else goto cMm;
  cMm:
      Hp = Hp + 16;
      if (Hp > HpLim) goto cMo; else goto cMn;
  cMo:
      HpAlloc = 16;
      goto cMl;
  cMl:
      R1 = T2902_B_PairingSum.$fSumPSumab_$cinsert_closure;
      P32[(old + 28)] = _sI0::P32;
      P32[(old + 24)] = _sI1::P32;
      P32[(old + 20)] = _sI2::P32;
      P32[(old + 16)] = _sI3::P32;
      P32[(old + 12)] = _sI4::P32;
      P32[(old + 8)] = _sI5::P32;
      call (stg_gc_fun)(R1) args: 28, res: 0, upd: 4;
  cMn:
      I32[Hp - 12] = T2902_B_PairingSum.Tree_con_info;
      P32[Hp - 8] = _sI3::P32;
      P32[Hp - 4] = _sI4::P32;
      P32[Hp] = GHC.Types.[]_closure+1;
      _cMj::P32 = Hp - 10;
      P32[(old + 24)] = _sI0::P32;
      P32[(old + 20)] = _sI1::P32;
      P32[(old + 16)] = _sI2::P32;
      P32[(old + 12)] = _cMj::P32;
      P32[(old + 8)] = _sI5::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunion_info() args: 24, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cO8:
      _sIg::P32 = R1;
      goto cO6;
  cO6:
      if (Sp - <highSp> < SpLim) goto cO9; else goto cOa;
  cO9:
      R1 = _sIg::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  cOa:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _sIg::P32;
      _sI7::P32 = P32[_sIg::P32 + 8];
      _sI8::P32 = P32[_sIg::P32 + 12];
      _sI9::P32 = P32[_sIg::P32 + 16];
      _sIe::P32 = P32[_sIg::P32 + 20];
      P32[(old + 28)] = _sI7::P32;
      P32[(old + 24)] = _sI8::P32;
      P32[(old + 20)] = _sI9::P32;
      P32[(old + 16)] = _sIe::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  cOi:
      _sI7::P32 = P32[(old + 20)];
      _sI8::P32 = P32[(old + 16)];
      _sI9::P32 = P32[(old + 12)];
      _sIa::P32 = P32[(old + 8)];
      goto cNW;
  cNW:
      if (Sp - <highSp> < SpLim) goto cOj; else goto cOk;
  cOj:
      R1 = T2902_B_PairingSum.$fSumPSumab_$cextractMin_closure;
      P32[(old + 20)] = _sI7::P32;
      P32[(old + 16)] = _sI8::P32;
      P32[(old + 12)] = _sI9::P32;
      P32[(old + 8)] = _sIa::P32;
      call (stg_gc_fun)(R1) args: 20, res: 0, upd: 4;
  cOk:
      I32[(young<cNY> + 4)] = cNY;
      R1 = _sIa::P32;
      if (R1 & 3 != 0) goto cNY; else goto cNZ;
  cNZ:
      call (I32[R1])(R1) returns to cNY, args: 4, res: 4, upd: 4;
  cNY:
      _sIb::P32 = R1;
      _cOe::P32 = _sIb::P32 & 3;
      if (_cOe::P32 >= 2) goto cOd; else goto cOc;
  cOd:
      Hp = Hp + 48;
      if (Hp > HpLim) goto cOr; else goto cOq;
  cOr:
      HpAlloc = 48;
      goto cOp;
  cOp:
      R1 = _sIb::P32;
      call stg_gc_unpt_r1(R1) returns to cNY, args: 4, res: 4, upd: 4;
  cOq:
      _sIc::P32 = P32[_sIb::P32 + 2];
      _sId::P32 = P32[_sIb::P32 + 6];
      _sIe::P32 = P32[_sIb::P32 + 10];
      I32[Hp - 44] = sat_sIg_info;
      P32[Hp - 36] = _sI7::P32;
      P32[Hp - 32] = _sI8::P32;
      P32[Hp - 28] = _sI9::P32;
      P32[Hp - 24] = _sIe::P32;
      _cO4::P32 = Hp - 44;
      I32[Hp - 20] = (,)_con_info;
      P32[Hp - 16] = _sIc::P32;
      P32[Hp - 12] = _sId::P32;
      _cOn::P32 = Hp - 19;
      I32[Hp - 8] = (,)_con_info;
      P32[Hp - 4] = _cOn::P32;
      P32[Hp] = _cO4::P32;
      _cOo::P32 = Hp - 7;
      R1 = _cOo::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  cOc:
      R1 = GHC.Err.undefined_closure;
      call stg_ap_0_fast(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cPb:
      _sIr::P32 = R1;
      goto cP7;
  cP7:
      if (Sp - <highSp> < SpLim) goto cPc; else goto cPd;
  cPc:
      R1 = _sIr::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  cPd:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _sIr::P32;
      _sIh::P32 = P32[_sIr::P32 + 8];
      _sIi::P32 = P32[_sIr::P32 + 12];
      _sIj::P32 = P32[_sIr::P32 + 16];
      _sIo::P32 = P32[_sIr::P32 + 20];
      I32[(young<cP9> + 4)] = cP9;
      P32[(young<cP9> + 20)] = _sIh::P32;
      P32[(young<cP9> + 16)] = _sIi::P32;
      P32[(young<cP9> + 12)] = _sIj::P32;
      P32[(young<cP9> + 8)] = _sIo::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() returns to cP9, args: 20, res: 4, upd: 12;
  cP9:
      _sIq::P32 = R1;
      P32[(old + 28)] = _sIh::P32;
      P32[(old + 24)] = _sIi::P32;
      P32[(old + 20)] = _sIj::P32;
      P32[(old + 16)] = _sIq::P32;
      call T2902_B_PairingSum.$fSumPSumab_$ctoList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  cPo:
      _sIh::P32 = P32[(old + 20)];
      _sIi::P32 = P32[(old + 16)];
      _sIj::P32 = P32[(old + 12)];
      _sIk::P32 = P32[(old + 8)];
      goto cOX;
  cOX:
      if (Sp - <highSp> < SpLim) goto cPp; else goto cPq;
  cPp:
      R1 = T2902_B_PairingSum.$fSumPSumab_$ctoList_closure;
      P32[(old + 20)] = _sIh::P32;
      P32[(old + 16)] = _sIi::P32;
      P32[(old + 12)] = _sIj::P32;
      P32[(old + 8)] = _sIk::P32;
      call (stg_gc_fun)(R1) args: 20, res: 0, upd: 4;
  cPq:
      I32[(young<cOZ> + 4)] = cOZ;
      R1 = _sIk::P32;
      if (R1 & 3 != 0) goto cOZ; else goto cP0;
  cP0:
      call (I32[R1])(R1) returns to cOZ, args: 4, res: 4, upd: 4;
  cOZ:
      _sIl::P32 = R1;
      _cPk::P32 = _sIl::P32 & 3;
      if (_cPk::P32 >= 2) goto cPj; else goto cPi;
  cPj:
      Hp = Hp + 48;
      if (Hp > HpLim) goto cPx; else goto cPw;
  cPx:
      HpAlloc = 48;
      goto cPv;
  cPv:
      R1 = _sIl::P32;
      call stg_gc_unpt_r1(R1) returns to cOZ, args: 4, res: 4, upd: 4;
  cPw:
      _sIm::P32 = P32[_sIl::P32 + 2];
      _sIn::P32 = P32[_sIl::P32 + 6];
      _sIo::P32 = P32[_sIl::P32 + 10];
      I32[Hp - 44] = sat_sIr_info;
      P32[Hp - 36] = _sIh::P32;
      P32[Hp - 32] = _sIi::P32;
      P32[Hp - 28] = _sIj::P32;
      P32[Hp - 24] = _sIo::P32;
      _cP5::P32 = Hp - 44;
      I32[Hp - 20] = (,)_con_info;
      P32[Hp - 16] = _sIm::P32;
      P32[Hp - 12] = _sIn::P32;
      _cPt::P32 = Hp - 19;
      I32[Hp - 8] = :_con_info;
      P32[Hp - 4] = _cPt::P32;
      P32[Hp] = _cP5::P32;
      _cPu::P32 = Hp - 6;
      R1 = _cPu::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  cPi:
      R1 = []_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cQh:
      _sIs::P32 = P32[(old + 20)];
      _sIt::P32 = P32[(old + 16)];
      _sIu::P32 = P32[(old + 12)];
      _sIv::P32 = P32[(old + 8)];
      goto cQ5;
  cQ5:
      if (Sp - <highSp> < SpLim) goto cQi; else goto cQj;
  cQi:
      R1 = T2902_B_PairingSum.$fSumPSumab_$cfromList_closure;
      P32[(old + 20)] = _sIs::P32;
      P32[(old + 16)] = _sIt::P32;
      P32[(old + 12)] = _sIu::P32;
      P32[(old + 8)] = _sIv::P32;
      call (stg_gc_fun)(R1) args: 20, res: 0, upd: 4;
  cQj:
      I32[(young<cQ7> + 4)] = cQ7;
      R1 = _sIv::P32;
      if (R1 & 3 != 0) goto cQ7; else goto cQ8;
  cQ8:
      call (I32[R1])(R1) returns to cQ7, args: 4, res: 4, upd: 4;
  cQ7:
      _sIw::P32 = R1;
      _cQd::P32 = _sIw::P32 & 3;
      if (_cQd::P32 >= 2) goto cQc; else goto cQb;
  cQc:
      _sIx::P32 = P32[_sIw::P32 + 2];
      _sIy::P32 = P32[_sIw::P32 + 6];
      I32[(young<cQp> + 4)] = cQp;
      R1 = _sIx::P32;
      if (R1 & 3 != 0) goto cQp; else goto cQq;
  cQq:
      call (I32[R1])(R1) returns to cQp, args: 4, res: 4, upd: 4;
  cQp:
      _sIz::P32 = R1;
      _sIA::P32 = P32[_sIz::P32 + 3];
      _sIB::P32 = P32[_sIz::P32 + 7];
      I32[(young<cQu> + 4)] = cQu;
      P32[(young<cQu> + 20)] = _sIs::P32;
      P32[(young<cQu> + 16)] = _sIt::P32;
      P32[(young<cQu> + 12)] = _sIu::P32;
      P32[(young<cQu> + 8)] = _sIy::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() returns to cQu, args: 20, res: 4, upd: 4;
  cQu:
      _sIC::P32 = R1;
      P32[(old + 28)] = _sIs::P32;
      P32[(old + 24)] = _sIt::P32;
      P32[(old + 20)] = _sIu::P32;
      P32[(old + 16)] = _sIA::P32;
      P32[(old + 12)] = _sIB::P32;
      P32[(old + 8)] = _sIC::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cinsert_info() args: 28, res: 0, upd: 4;
  cQb:
      R1 = T2902_B_PairingSum.Empty_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cR1:
      _sIL::P32 = R1;
      _B1::P32 = P32[(old + 8)];
      goto cQZ;
  cQZ:
      if (Sp - <highSp> < SpLim) goto cR2; else goto cR3;
  cR2:
      R1 = _sIL::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cR3:
      _sID::P32 = P32[_sIL::P32 + 3];
      _sIE::P32 = P32[_sIL::P32 + 7];
      _sIF::P32 = P32[_sIL::P32 + 11];
      P32[(old + 20)] = _sID::P32;
      P32[(old + 16)] = _sIE::P32;
      P32[(old + 12)] = _sIF::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$ctoList_info() args: 20, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cR8:
      _sIK::P32 = R1;
      _B1::P32 = P32[(old + 8)];
      goto cR6;
  cR6:
      if (Sp - <highSp> < SpLim) goto cR9; else goto cRa;
  cR9:
      R1 = _sIK::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cRa:
      _sID::P32 = P32[_sIK::P32 + 3];
      _sIE::P32 = P32[_sIK::P32 + 7];
      _sIF::P32 = P32[_sIK::P32 + 11];
      P32[(old + 20)] = _sID::P32;
      P32[(old + 16)] = _sIE::P32;
      P32[(old + 12)] = _sIF::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 20, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cRf:
      _sIJ::P32 = R1;
      _B1::P32 = P32[(old + 8)];
      goto cRd;
  cRd:
      if (Sp - <highSp> < SpLim) goto cRg; else goto cRh;
  cRg:
      R1 = _sIJ::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cRh:
      _sID::P32 = P32[_sIJ::P32 + 3];
      _sIE::P32 = P32[_sIJ::P32 + 7];
      _sIF::P32 = P32[_sIJ::P32 + 11];
      P32[(old + 20)] = _sID::P32;
      P32[(old + 16)] = _sIE::P32;
      P32[(old + 12)] = _sIF::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cextractMin_info() args: 20, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cRm:
      _sII::P32 = R1;
      _B1::P32 = P32[(old + 8)];
      goto cRk;
  cRk:
      if (Sp - <highSp> < SpLim) goto cRn; else goto cRo;
  cRn:
      R1 = _sII::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  cRo:
      _sID::P32 = P32[_sII::P32 + 3];
      _sIE::P32 = P32[_sII::P32 + 7];
      _sIF::P32 = P32[_sII::P32 + 11];
      P32[(old + 20)] = _sID::P32;
      P32[(old + 16)] = _sIE::P32;
      P32[(old + 12)] = _sIF::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() args: 20, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cRt:
      _sIH::P32 = R1;
      _B2::P32 = P32[(old + 12)];
      _B1::P32 = P32[(old + 8)];
      goto cRr;
  cRr:
      if (Sp - <highSp> < SpLim) goto cRu; else goto cRv;
  cRu:
      R1 = _sIH::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 12, res: 0, upd: 4;
  cRv:
      _sID::P32 = P32[_sIH::P32 + 2];
      _sIE::P32 = P32[_sIH::P32 + 6];
      _sIF::P32 = P32[_sIH::P32 + 10];
      P32[(old + 24)] = _sID::P32;
      P32[(old + 20)] = _sIE::P32;
      P32[(old + 16)] = _sIF::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunion_info() args: 24, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cRA:
      _sIG::P32 = R1;
      _B3::P32 = P32[(old + 16)];
      _B2::P32 = P32[(old + 12)];
      _B1::P32 = P32[(old + 8)];
      goto cRy;
  cRy:
      if (Sp - <highSp> < SpLim) goto cRB; else goto cRC;
  cRB:
      R1 = _sIG::P32;
      P32[(old + 16)] = _B3::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 16, res: 0, upd: 4;
  cRC:
      _sID::P32 = P32[_sIG::P32 + 1];
      _sIE::P32 = P32[_sIG::P32 + 5];
      _sIF::P32 = P32[_sIG::P32 + 9];
      P32[(old + 28)] = _sID::P32;
      P32[(old + 24)] = _sIE::P32;
      P32[(old + 20)] = _sIF::P32;
      P32[(old + 16)] = _B3::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cinsert_info() args: 28, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cRE:
      _sID::P32 = P32[(old + 16)];
      _sIE::P32 = P32[(old + 12)];
      _sIF::P32 = P32[(old + 8)];
      goto cQV;
  cQV:
      if (Sp - <highSp> < SpLim) goto cRF; else goto cRG;
  cRG:
      Hp = Hp + 124;
      if (Hp > HpLim) goto cRI; else goto cRH;
  cRI:
      HpAlloc = 124;
      goto cRF;
  cRF:
      R1 = T2902_B_PairingSum.$fSumPSumab_closure;
      P32[(old + 16)] = _sID::P32;
      P32[(old + 12)] = _sIE::P32;
      P32[(old + 8)] = _sIF::P32;
      call (stg_gc_fun)(R1) args: 16, res: 0, upd: 4;
  cRH:
      I32[Hp - 120] = sat_sIL_info;
      P32[Hp - 116] = _sID::P32;
      P32[Hp - 112] = _sIE::P32;
      P32[Hp - 108] = _sIF::P32;
      _cQX::P32 = Hp - 119;
      I32[Hp - 104] = sat_sIK_info;
      P32[Hp - 100] = _sID::P32;
      P32[Hp - 96] = _sIE::P32;
      P32[Hp - 92] = _sIF::P32;
      _cR4::P32 = Hp - 103;
      I32[Hp - 88] = sat_sIJ_info;
      P32[Hp - 84] = _sID::P32;
      P32[Hp - 80] = _sIE::P32;
      P32[Hp - 76] = _sIF::P32;
      _cRb::P32 = Hp - 87;
      I32[Hp - 72] = sat_sII_info;
      P32[Hp - 68] = _sID::P32;
      P32[Hp - 64] = _sIE::P32;
      P32[Hp - 60] = _sIF::P32;
      _cRi::P32 = Hp - 71;
      I32[Hp - 56] = sat_sIH_info;
      P32[Hp - 52] = _sID::P32;
      P32[Hp - 48] = _sIE::P32;
      P32[Hp - 44] = _sIF::P32;
      _cRp::P32 = Hp - 54;
      I32[Hp - 40] = sat_sIG_info;
      P32[Hp - 36] = _sID::P32;
      P32[Hp - 32] = _sIE::P32;
      P32[Hp - 28] = _sIF::P32;
      _cRw::P32 = Hp - 37;
      I32[Hp - 24] = T2902_Sum.D:Sum_con_info;
      P32[Hp - 20] = _cRw::P32;
      P32[Hp - 16] = _cRp::P32;
      P32[Hp - 12] = _cRi::P32;
      P32[Hp - 8] = _cRb::P32;
      P32[Hp - 4] = _cR4::P32;
      P32[Hp] = _cQX::P32;
      _cRD::P32 = Hp - 23;
      R1 = _cRD::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cSB:
      _B3::P32 = P32[(old + 16)];
      _B2::P32 = P32[(old + 12)];
      _B1::P32 = P32[(old + 8)];
      goto cSy;
  cSy:
      if (Sp - <highSp> < SpLim) goto cSC; else goto cSD;
  cSD:
      Hp = Hp + 16;
      if (Hp > HpLim) goto cSF; else goto cSE;
  cSF:
      HpAlloc = 16;
      goto cSC;
  cSC:
      R1 = T2902_B_PairingSum.Tree_closure;
      P32[(old + 16)] = _B3::P32;
      P32[(old + 12)] = _B2::P32;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 16, res: 0, upd: 4;
  cSE:
      I32[Hp - 12] = T2902_B_PairingSum.Tree_con_info;
      P32[Hp - 8] = _B3::P32;
      P32[Hp - 4] = _B2::P32;
      P32[Hp] = _B1::P32;
      _cSA::P32 = Hp - 10;
      R1 = _cSA::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cSN:
      R1 = R1 + 1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cSS:
      R1 = R1 + 2;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  cST:
      R1 = R1 + 2;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}


[3 of 3] Compiling Main             ( T2902_B.hs, T2902_B.o )

==================== Loopify tail calls ====================
{offset
  c25p:
      _s243::P32 = P32[(old + 16)];
      _s244::P32 = P32[(old + 12)];
      _s245::P32 = P32[(old + 8)];
      goto c25d;
  c25d:
      if (Sp - <highSp> < SpLim) goto c25q; else goto c25r;
  c25q:
      R1 = lvl_r23V_closure;
      P32[(old + 16)] = _s243::P32;
      P32[(old + 12)] = _s244::P32;
      P32[(old + 8)] = _s245::P32;
      call (stg_gc_fun)(R1) args: 16, res: 0, upd: 4;
  c25r:
      I32[(young<c25f> + 4)] = c25f;
      R1 = _s245::P32;
      if (R1 & 3 != 0) goto c25f; else goto c25g;
  c25g:
      call (I32[R1])(R1) returns to c25f, args: 4, res: 4, upd: 4;
  c25f:
      _s246::P32 = R1;
      _c25l::P32 = _s246::P32 & 3;
      if (_c25l::P32 >= 2) goto c25k; else goto c25j;
  c25k:
      Hp = Hp + 40;
      if (Hp > HpLim) goto c25C; else goto c25B;
  c25C:
      HpAlloc = 40;
      goto c25A;
  c25A:
      R1 = _s246::P32;
      call stg_gc_unpt_r1(R1) returns to c25f, args: 4, res: 4, upd: 4;
  c25B:
      _s247::P32 = P32[_s246::P32 + 2];
      _s248::P32 = P32[_s246::P32 + 6];
      I32[Hp - 36] = stg_ap_2_upd_info;
      P32[Hp - 28] = _s244::P32;
      P32[Hp - 24] = _s248::P32;
      _c25x::P32 = Hp - 36;
      I32[Hp - 20] = (,)_con_info;
      P32[Hp - 16] = _s243::P32;
      P32[Hp - 12] = _s247::P32;
      _c25y::P32 = Hp - 19;
      I32[Hp - 8] = :_con_info;
      P32[Hp - 4] = _c25y::P32;
      P32[Hp] = _c25x::P32;
      _c25z::P32 = Hp - 6;
      R1 = _c25z::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  c25j:
      R1 = []_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c25S:
      _s24b::P32 = P32[(old + 8)];
      goto c25Q;
  c25Q:
      if (Sp - <highSp> < SpLim) goto c25T; else goto c25U;
  c25T:
      R1 = n_r23W_closure;
      P32[(old + 8)] = _s24b::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  c25U:
      R1 = []_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c263:
      _B1::P32 = P32[(old + 8)];
      goto c261;
  c261:
      if (Sp - <highSp> < SpLim) goto c264; else goto c265;
  c264:
      R1 = n1_r23X_closure;
      P32[(old + 8)] = _B1::P32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  c265:
      P32[(old + 8)] = _B1::P32;
      call n_r23W_info() args: 8, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c26h:
      _r23Y::P32 = R1;
      goto c26c;
  c26c:
      if (Sp - <highSp> < SpLim) goto c26i; else goto c26j;
  c26j:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c26l; else goto c26k;
  c26l:
      HpAlloc = 8;
      goto c26i;
  c26i:
      R1 = _r23Y::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c26k:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c26e::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _r23Y::P32, Hp - 4);
      if (_c26e::I32 == 0) goto c26g; else goto c26f;
  c26g:
      call (I32[_r23Y::P32])() args: 4, res: 0, upd: 4;
  c26f:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = GHC.Types.[]_closure+1;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c271:
      _s24l::P32 = R1;
      goto c26V;
  c26V:
      if (Sp - <highSp> < SpLim) goto c272; else goto c273;
  c272:
      R1 = _s24l::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c273:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24l::P32;
      _s24g::P32 = P32[_s24l::P32 + 8];
      _s24c::I32 = I32[_s24l::P32 + 12];
      _s24j::I32 = _s24c::I32;
      if (_s24j::I32 != 20) goto c26Z; else goto c270;
  c26Z:
      _c275::I32 = _s24j::I32 + 1;
      _s24k::I32 = _c275::I32;
      I32[(old + 20)] = _s24k::I32;
      P32[(old + 16)] = _s24g::P32;
      call go_r23Z_info() args: 20, res: 0, upd: 12;
  c270:
      R1 = []_closure+1;
      call (P32[(old + 12)])(R1) args: 12, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c27d:
      _s24c::I32 = I32[(old + 12)];
      _s24d::P32 = P32[(old + 8)];
      goto c26L;
  c26L:
      if (Sp - <highSp> < SpLim) goto c27e; else goto c27f;
  c27e:
      R1 = go_r23Z_closure;
      I32[(old + 12)] = _s24c::I32;
      P32[(old + 8)] = _s24d::P32;
      call (stg_gc_fun)(R1) args: 12, res: 0, upd: 4;
  c27f:
      I32[(young<c26N> + 4)] = c26N;
      R1 = _s24d::P32;
      if (R1 & 3 != 0) goto c26N; else goto c26O;
  c26O:
      call (I32[R1])(R1) returns to c26N, args: 4, res: 4, upd: 4;
  c26N:
      _s24e::P32 = R1;
      _c279::P32 = _s24e::P32 & 3;
      if (_c279::P32 >= 2) goto c278; else goto c277;
  c278:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c27n; else goto c27m;
  c27n:
      HpAlloc = 48;
      goto c27l;
  c27l:
      R1 = _s24e::P32;
      call stg_gc_unpt_r1(R1) returns to c26N, args: 4, res: 4, upd: 4;
  c27m:
      _s24f::P32 = P32[_s24e::P32 + 2];
      _s24g::P32 = P32[_s24e::P32 + 6];
      I32[Hp - 44] = sat_s24l_info;
      P32[Hp - 36] = _s24g::P32;
      I32[Hp - 32] = _s24c::I32;
      _c26T::P32 = Hp - 44;
      I32[Hp - 28] = GHC.Types.I#_con_info;
      I32[Hp - 24] = _s24c::I32;
      _c27i::P32 = Hp - 27;
      I32[Hp - 20] = (,)_con_info;
      P32[Hp - 16] = _c27i::P32;
      P32[Hp - 12] = _s24f::P32;
      _c27j::P32 = Hp - 19;
      I32[Hp - 8] = :_con_info;
      P32[Hp - 4] = _c27j::P32;
      P32[Hp] = _c26T::P32;
      _c27k::P32 = Hp - 6;
      R1 = _c27k::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
  c277:
      R1 = []_closure+1;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c27Z:
      _s24G::P32 = R1;
      goto c27T;
  c27T:
      if (Sp - <highSp> < SpLim) goto c280; else goto c281;
  c280:
      R1 = _s24G::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c281:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24G::P32;
      _s24m::I32 = I32[_s24G::P32 + 8];
      _s24E::I32 = _s24m::I32;
      if (_s24E::I32 != 20) goto c27X; else goto c27Y;
  c27X:
      _c283::I32 = _s24E::I32 + 1;
      _s24F::I32 = _c283::I32;
      I32[(old + 16)] = _s24F::I32;
      call Main.main_go_info() args: 16, res: 0, upd: 12;
  c27Y:
      R1 = []_closure+1;
      call (P32[(old + 12)])(R1) args: 12, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c298:
      _s24z::P32 = R1;
      goto c28p;
  c28p:
      if (Sp - <highSp> < SpLim) goto c299; else goto c29q;
  c299:
      R1 = _s24z::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c29q:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24z::P32;
      _s24m::I32 = I32[_s24z::P32 + 8];
      _c28r::I32 = 3 + _s24m::I32;
      _s24v::I32 = _c28r::I32;
      _c28u::I32 = %MO_S_Ge_W32(_s24v::I32, _s24m::I32);
      if (_c28u::I32 >= 1) goto c29l; else goto c29e;
  c29l:
      I32[(young<c29k> + 4)] = c29k;
      P32[(young<c29k> + 32)] = lvl_r23V_closure+3;
      P32[(young<c29k> + 28)] = n1_r23X_closure+1;
      I32[(young<c29k> + 24)] = _s24m::I32;
      I32[(young<c29k> + 20)] = _s24v::I32;
      I32[(young<c29k> + 16)] = 20;
      I32[(young<c29k> + 12)] = stg_ap_p_info;
      P32[(young<c29k> + 8)] = xs2_r23U_closure+2;
      call GHC.Enum.efdtIntUpFB_info() returns to c29k, args: 32, res: 4, upd: 12;
  c29k:
      _s24y::P32 = R1;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _s24y::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
  c29e:
      I32[(young<c29c> + 4)] = c29c;
      P32[(young<c29c> + 32)] = lvl_r23V_closure+3;
      P32[(young<c29c> + 28)] = n1_r23X_closure+1;
      I32[(young<c29c> + 24)] = _s24m::I32;
      I32[(young<c29c> + 20)] = _s24v::I32;
      I32[(young<c29c> + 16)] = 20;
      I32[(young<c29c> + 12)] = stg_ap_p_info;
      P32[(young<c29c> + 8)] = xs2_r23U_closure+2;
      call GHC.Enum.efdtIntDnFB_info() returns to c29c, args: 32, res: 4, upd: 12;
  c29c:
      _s24x::P32 = R1;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _s24x::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c29u:
      _s24u::P32 = R1;
      goto c28N;
  c28N:
      if (Sp - <highSp> < SpLim) goto c29v; else goto c29M;
  c29v:
      R1 = _s24u::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c29M:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24u::P32;
      _s24m::I32 = I32[_s24u::P32 + 8];
      _c28P::I32 = 2 + _s24m::I32;
      _s24q::I32 = _c28P::I32;
      _c28S::I32 = %MO_S_Ge_W32(_s24q::I32, _s24m::I32);
      if (_c28S::I32 >= 1) goto c29H; else goto c29A;
  c29H:
      I32[(young<c29G> + 4)] = c29G;
      P32[(young<c29G> + 32)] = lvl_r23V_closure+3;
      P32[(young<c29G> + 28)] = n_r23W_closure+1;
      I32[(young<c29G> + 24)] = _s24m::I32;
      I32[(young<c29G> + 20)] = _s24q::I32;
      I32[(young<c29G> + 16)] = 20;
      I32[(young<c29G> + 12)] = stg_ap_p_info;
      P32[(young<c29G> + 8)] = xs1_r23S_closure+2;
      call GHC.Enum.efdtIntUpFB_info() returns to c29G, args: 32, res: 4, upd: 12;
  c29G:
      _s24t::P32 = R1;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _s24t::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
  c29A:
      I32[(young<c29y> + 4)] = c29y;
      P32[(young<c29y> + 32)] = lvl_r23V_closure+3;
      P32[(young<c29y> + 28)] = n_r23W_closure+1;
      I32[(young<c29y> + 24)] = _s24m::I32;
      I32[(young<c29y> + 20)] = _s24q::I32;
      I32[(young<c29y> + 16)] = 20;
      I32[(young<c29y> + 12)] = stg_ap_p_info;
      P32[(young<c29y> + 8)] = xs1_r23S_closure+2;
      call GHC.Enum.efdtIntDnFB_info() returns to c29y, args: 32, res: 4, upd: 12;
  c29y:
      _s24s::P32 = R1;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _s24s::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c29X:
      _s24p::P32 = R1;
      goto c295;
  c295:
      if (Sp - <highSp> < SpLim) goto c29Y; else goto c2a5;
  c29Y:
      R1 = _s24p::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2a5:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24p::P32;
      _s24m::I32 = I32[_s24p::P32 + 8];
      _c297::I32 = %MO_S_Gt_W32(_s24m::I32, 20);
      if (_c297::I32 >= 1) goto c29T; else goto c29S;
  c29T:
      R1 = lvl1_r23Y_closure;
      call (I32[R1])(R1) args: 12, res: 0, upd: 12;
  c29S:
      I32[(young<c2a0> + 4)] = c2a0;
      I32[(young<c2a0> + 12)] = _s24m::I32;
      P32[(young<c2a0> + 8)] = xs_r23Q_closure+2;
      call go_r23Z_info() returns to c2a0, args: 12, res: 4, upd: 12;
  c2a0:
      _s24o::P32 = R1;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _s24o::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cfromList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2a7:
      _s24D::P32 = R1;
      goto c28l;
  c28l:
      if (Sp - <highSp> < SpLim) goto c2a8; else goto c2a9;
  c2a9:
      Hp = Hp + 72;
      if (Hp > HpLim) goto c2ab; else goto c2aa;
  c2ab:
      HpAlloc = 72;
      goto c2a8;
  c2a8:
      R1 = _s24D::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2aa:
      I32[(old + 12)] = stg_upd_frame_info;
      P32[(old + 8)] = _s24D::P32;
      _s24m::I32 = I32[_s24D::P32 + 8];
      I32[Hp - 68] = sat_s24z_info;
      I32[Hp - 60] = _s24m::I32;
      _c28n::P32 = Hp - 68;
      I32[Hp - 56] = :_con_info;
      P32[Hp - 52] = _c28n::P32;
      P32[Hp - 48] = GHC.Types.[]_closure+1;
      _c28K::P32 = Hp - 54;
      I32[Hp - 44] = sat_s24u_info;
      I32[Hp - 36] = _s24m::I32;
      _c28L::P32 = Hp - 44;
      I32[Hp - 32] = :_con_info;
      P32[Hp - 28] = _c28L::P32;
      P32[Hp - 24] = _c28K::P32;
      _c292::P32 = Hp - 30;
      I32[Hp - 20] = sat_s24p_info;
      I32[Hp - 12] = _s24m::I32;
      _c293::P32 = Hp - 20;
      I32[Hp - 8] = :_con_info;
      P32[Hp - 4] = _c293::P32;
      P32[Hp] = _c292::P32;
      _c2a6::P32 = Hp - 6;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = _c2a6::P32;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2ad:
      _s24m::I32 = I32[(old + 8)];
      goto c27P;
  c27P:
      if (Sp - <highSp> < SpLim) goto c2ae; else goto c2af;
  c2af:
      Hp = Hp + 36;
      if (Hp > HpLim) goto c2ah; else goto c2ag;
  c2ah:
      HpAlloc = 36;
      goto c2ae;
  c2ae:
      R1 = Main.main_go_closure;
      I32[(old + 8)] = _s24m::I32;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 4;
  c2ag:
      I32[Hp - 32] = sat_s24G_info;
      I32[Hp - 24] = _s24m::I32;
      _c27R::P32 = Hp - 32;
      I32[Hp - 20] = sat_s24D_info;
      I32[Hp - 12] = _s24m::I32;
      _c28j::P32 = Hp - 20;
      I32[Hp - 8] = :_con_info;
      P32[Hp - 4] = _c28j::P32;
      P32[Hp] = _c27R::P32;
      _c2ac::P32 = Hp - 6;
      R1 = _c2ac::P32;
      call (P32[(old + 4)])(R1) args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c2aR:
      _rT5::P32 = R1;
      goto c2aM;
  c2aM:
      if (Sp - <highSp> < SpLim) goto c2aS; else goto c2aT;
  c2aT:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c2aV; else goto c2aU;
  c2aV:
      HpAlloc = 8;
      goto c2aS;
  c2aS:
      R1 = _rT5::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2aU:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c2aO::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _rT5::P32, Hp - 4);
      if (_c2aO::I32 == 0) goto c2aQ; else goto c2aP;
  c2aQ:
      call (I32[_rT5::P32])() args: 4, res: 0, upd: 4;
  c2aP:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      I32[(old + 16)] = 1;
      call Main.main_go_info() args: 16, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2bb:
      _rT6::P32 = R1;
      goto c2b6;
  c2b6:
      if (Sp - <highSp> < SpLim) goto c2bc; else goto c2bd;
  c2bd:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c2bf; else goto c2be;
  c2bf:
      HpAlloc = 8;
      goto c2bc;
  c2bc:
      R1 = _rT6::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2be:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c2b8::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _rT6::P32, Hp - 4);
      if (_c2b8::I32 == 0) goto c2ba; else goto c2b9;
  c2ba:
      call (I32[_rT6::P32])() args: 4, res: 0, upd: 4;
  c2b9:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = Main.main6_closure;
      call T2902_B_PairingSum.$fSumPSumab_$cunions_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2bv:
      _rT7::P32 = R1;
      goto c2bq;
  c2bq:
      if (Sp - <highSp> < SpLim) goto c2bw; else goto c2bx;
  c2bx:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c2bz; else goto c2by;
  c2bz:
      HpAlloc = 8;
      goto c2bw;
  c2bw:
      R1 = _rT7::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2by:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c2bs::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _rT7::P32, Hp - 4);
      if (_c2bs::I32 == 0) goto c2bu; else goto c2bt;
  c2bu:
      call (I32[_rT7::P32])() args: 4, res: 0, upd: 4;
  c2bt:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      P32[(old + 28)] = GHC.Classes.$fOrdInt_closure;
      P32[(old + 24)] = GHC.Classes.$fEqInt_closure;
      P32[(old + 20)] = GHC.Num.$fNumInt_closure;
      P32[(old + 16)] = Main.main5_closure;
      call T2902_B_PairingSum.$fSumPSumab_$ctoList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2bP:
      _rT9::P32 = R1;
      goto c2bK;
  c2bK:
      if (Sp - <highSp> < SpLim) goto c2bQ; else goto c2bR;
  c2bR:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c2bT; else goto c2bS;
  c2bT:
      HpAlloc = 8;
      goto c2bQ;
  c2bQ:
      R1 = _rT9::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2bS:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c2bM::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _rT9::P32, Hp - 4);
      if (_c2bM::I32 == 0) goto c2bO; else goto c2bN;
  c2bO:
      call (I32[_rT9::P32])() args: 4, res: 0, upd: 4;
  c2bN:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      I32[(old + 20)] = 20;
      P32[(old + 16)] = Main.main4_closure;
      call GHC.List.take_unsafe_UInt_info() args: 20, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2c9:
      _rTc::P32 = R1;
      goto c2c4;
  c2c4:
      if (Sp - <highSp> < SpLim) goto c2ca; else goto c2cb;
  c2cb:
      Hp = Hp + 8;
      if (Hp > HpLim) goto c2cd; else goto c2cc;
  c2cd:
      HpAlloc = 8;
      goto c2ca;
  c2ca:
      R1 = _rTc::P32;
      call (stg_gc_enter_1)(R1) args: 4, res: 0, upd: 4;
  c2cc:
      I32[Hp - 4] = stg_CAF_BLACKHOLE_info;
      I32[Hp] = CurrentTSO;
      (_c2c6::I32) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                               PtrHint]  result hints:  [] newCAF(BaseReg, _rTc::P32, Hp - 4);
      if (_c2c6::I32 == 0) goto c2c8; else goto c2c7;
  c2c8:
      call (I32[_rTc::P32])() args: 4, res: 0, upd: 4;
  c2c7:
      I32[(old + 12)] = stg_bh_upd_frame_info;
      P32[(old + 8)] = Hp - 4;
      P32[(old + 28)] = GHC.Show.$fShowInt_closure;
      P32[(old + 24)] = GHC.Show.$fShowInt_closure;
      P32[(old + 20)] = Main.main3_closure;
      P32[(old + 16)] = GHC.Types.[]_closure+1;
      call GHC.Show.$fShow(,)_$cshowList_info() args: 28, res: 0, upd: 12;
}



==================== Loopify tail calls ====================
{offset
  c2co:
      if (Sp - <highSp> < SpLim) goto c2cr; else goto c2cs;
  c2cr:
      R1 = Main.main1_closure;
      call (stg_gc_fun)(R1) args: 4, res: 0, upd: 4;
  c2cs:
      P32[(old + 16)] = GHC.IO.Handle.FD.stdout_closure;
      P32[(old + 12)] = Main.main2_closure;
      P32[(old + 8)] = GHC.Types.True_closure+2;
      call GHC.IO.Handle.Text.hPutStr2_info() args: 16, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c2cA:
      if (Sp - <highSp> < SpLim) goto c2cD; else goto c2cE;
  c2cD:
      R1 = Main.main_closure;
      call (stg_gc_fun)(R1) args: 4, res: 0, upd: 4;
  c2cE:
      call Main.main1_info() args: 4, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c2cL:
      if (Sp - <highSp> < SpLim) goto c2cO; else goto c2cP;
  c2cO:
      R1 = Main.main7_closure;
      call (stg_gc_fun)(R1) args: 4, res: 0, upd: 4;
  c2cP:
      P32[(old + 8)] = Main.main1_closure+1;
      call GHC.TopHandler.runMainIO1_info() args: 8, res: 0, upd: 4;
}



==================== Loopify tail calls ====================
{offset
  c2cX:
      if (Sp - <highSp> < SpLim) goto c2d0; else goto c2d1;
  c2d0:
      R1 = :Main.main_closure;
      call (stg_gc_fun)(R1) args: 4, res: 0, upd: 4;
  c2d1:
      call Main.main7_info() args: 4, res: 0, upd: 4;
}


Linking T2902_B ...
